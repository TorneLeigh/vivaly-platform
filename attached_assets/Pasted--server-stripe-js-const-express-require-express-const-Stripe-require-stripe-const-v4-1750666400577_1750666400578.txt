// server/stripe.js
const express = require('express');
const Stripe = require('stripe');
const { v4: uuidv4 } = require('uuid');
const stripe = Stripe(process.env.STRIPE_SECRET_KEY);
const router = express.Router();

const BOOKINGS_DB_KEY = 'Bookings';
const USERS_DB_KEY = 'Users';
const PLATFORM_FEE_PERCENTAGE = 0.10;
const ONE_DAY_MS = 24 * 60 * 60 * 1000;

async function saveBooking(db, booking) {
  const bookings = (await db.get(BOOKINGS_DB_KEY)) || [];
  bookings.push(booking);
  await db.set(BOOKINGS_DB_KEY, bookings);
}

function daysBetween(startDate, endDate) {
  const ms = new Date(endDate) - new Date(startDate);
  return Math.ceil(ms / (1000 * 60 * 60 * 24));
}

router.post('/createBooking', async (req, res) => {
  const { parentId, caregiverId, jobId, startDate, endDate, ratePerHour, hoursPerDay } = req.body;
  const totalAmount = ratePerHour * hoursPerDay * daysBetween(startDate, endDate);

  const booking = {
    id: uuidv4(),
    parentId,
    caregiverId,
    jobId,
    startDate,
    endDate,
    ratePerHour,
    hoursPerDay,
    totalAmount,
    status: 'pending',
    paymentStatus: 'unpaid',
    personalDetailsVisible: false
  };

  await saveBooking(req.db, booking);
  res.json({ success: true, booking });
});

router.post('/acceptBooking', async (req, res) => {
  const { bookingId } = req.body;
  const bookings = (await req.db.get(BOOKINGS_DB_KEY)) || [];
  const booking = bookings.find(b => b.id === bookingId);
  if (!booking) return res.status(404).json({ error: 'Booking not found' });
  booking.status = 'confirmed';
  await req.db.set(BOOKINGS_DB_KEY, bookings);
  res.json({ success: true });
});

router.post('/createCheckoutSession', async (req, res) => {
  const { bookingId, parentEmail } = req.body;
  const bookings = (await req.db.get(BOOKINGS_DB_KEY)) || [];
  const booking = bookings.find(b => b.id === bookingId);
  if (!booking) return res.status(404).json({ error: 'Booking not found' });

  const platformFee = Math.round(booking.totalAmount * PLATFORM_FEE_PERCENTAGE * 100);
  const amountInCents = booking.totalAmount * 100;

  const session = await stripe.checkout.sessions.create({
    payment_method_types: ['card'],
    customer_email: parentEmail,
    line_items: [
      {
        price_data: {
          currency: 'aud',
          product_data: {
            name: 'Caregiver Booking',
          },
          unit_amount: amountInCents,
        },
        quantity: 1,
      },
    ],
    mode: 'payment',
    success_url: 'https://vivaly.com.au/success',
    cancel_url: 'https://vivaly.com.au/cancel',
    metadata: {
      bookingId: booking.id,
    },
  });

  booking.paymentStatus = 'paid_unreleased';
  await req.db.set(BOOKINGS_DB_KEY, bookings);

  res.json({ url: session.url });
});

router.post('/releasePayments', async (req, res) => {
  const now = new Date();
  const bookings = (await req.db.get(BOOKINGS_DB_KEY)) || [];
  let updated = 0;

  for (let booking of bookings) {
    const end = new Date(booking.endDate);
    const releaseTime = new Date(end.getTime() + ONE_DAY_MS);

    if (booking.status === 'confirmed' && booking.paymentStatus === 'paid_unreleased' && now > releaseTime) {
      booking.paymentStatus = 'released';
      booking.personalDetailsVisible = true;
      updated++;
    }
  }

  await req.db.set(BOOKINGS_DB_KEY, bookings);
  res.json({ success: true, updated });
});

module.exports = router;
