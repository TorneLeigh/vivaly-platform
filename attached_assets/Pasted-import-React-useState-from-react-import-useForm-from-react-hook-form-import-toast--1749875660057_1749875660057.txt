import React, { useState } from "react";
import { useForm } from "react-hook-form";
import { toast } from "../components/Toast"; // Adjust the import path for your toast implementation

type FormData = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  dateOfBirth: string;
  address: string;
  suburb: string;
  state: string;
  postcode: string;
  bio: string;
  services: string;
  availability: string;
  emergencyContactName: string;
  emergencyContactPhone: string;
};

const requiredFieldsStep1 = [
  "firstName",
  "lastName",
  "email",
  "phone",
  "dateOfBirth",
  "address",
  "suburb",
  "state",
  "postcode",
];

const CaregiverRegistration: React.FC = () => {
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);

  const {
    register,
    handleSubmit,
    trigger,
    formState: { errors },
    getValues,
  } = useForm<FormData>({
    mode: "onTouched",
  });

  const validateCurrentStep = async () => {
    let fieldsToValidate: (keyof FormData)[] = [];

    if (step === 1) {
      fieldsToValidate = requiredFieldsStep1 as (keyof FormData)[];
    } else if (step === 2) {
      // Example: make bio and services required on step 2
      fieldsToValidate = ["bio", "services"];
    } else if (step === 3) {
      // Example: availability required on step 3
      fieldsToValidate = ["availability"];
    } else if (step === 4) {
      // Emergency contact fields required on step 4
      fieldsToValidate = ["emergencyContactName", "emergencyContactPhone"];
    }

    const isStepValid = await trigger(fieldsToValidate);

    if (!isStepValid) {
      toast({
        title: "Please complete all required fields",
        description: "Fill in all required information before continuing.",
        variant: "destructive",
      });
    }

    return isStepValid;
  };

  const nextStep = async () => {
    setLoading(true);
    const isValid = await validateCurrentStep();
    setLoading(false);

    if (isValid) {
      setStep((prev) => Math.min(prev + 1, 4));
    }
  };

  const prevStep = () => {
    setStep((prev) => Math.max(prev - 1, 1));
  };

  const onSubmit = (data: FormData) => {
    console.log("Submitting registration data:", data);
    toast({
      title: "Registration complete!",
      description: "Thank you for signing up as a caregiver.",
      variant: "success",
    });
    // Add your submission logic here (e.g., API call)
  };

  return (
    <div className="max-w-xl mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Caregiver Registration</h1>

      <form onSubmit={handleSubmit(onSubmit)} noValidate>
        {step === 1 && (
          <>
            <h2 className="mb-4 font-semibold">Step 1: Personal Information</h2>
            <div className="mb-3">
              <label htmlFor="firstName" className="block font-medium">
                First Name *
              </label>
              <input
                id="firstName"
                type="text"
                {...register("firstName", { required: "First name is required" })}
                className={`w-full border rounded p-2 ${
                  errors.firstName ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.firstName && (
                <p className="text-red-600 text-sm mt-1">{errors.firstName.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="lastName" className="block font-medium">
                Last Name *
              </label>
              <input
                id="lastName"
                type="text"
                {...register("lastName", { required: "Last name is required" })}
                className={`w-full border rounded p-2 ${
                  errors.lastName ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.lastName && (
                <p className="text-red-600 text-sm mt-1">{errors.lastName.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="email" className="block font-medium">
                Email *
              </label>
              <input
                id="email"
                type="email"
                {...register("email", {
                  required: "Email is required",
                  pattern: {
                    value:
                      /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$/,
                    message: "Invalid email address",
                  },
                })}
                className={`w-full border rounded p-2 ${
                  errors.email ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.email && (
                <p className="text-red-600 text-sm mt-1">{errors.email.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="phone" className="block font-medium">
                Phone *
              </label>
              <input
                id="phone"
                type="tel"
                {...register("phone", { required: "Phone number is required" })}
                className={`w-full border rounded p-2 ${
                  errors.phone ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.phone && (
                <p className="text-red-600 text-sm mt-1">{errors.phone.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="dateOfBirth" className="block font-medium">
                Date of Birth *
              </label>
              <input
                id="dateOfBirth"
                type="date"
                {...register("dateOfBirth", { required: "Date of Birth is required" })}
                className={`w-full border rounded p-2 ${
                  errors.dateOfBirth ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.dateOfBirth && (
                <p className="text-red-600 text-sm mt-1">{errors.dateOfBirth.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="address" className="block font-medium">
                Address *
              </label>
              <input
                id="address"
                type="text"
                {...register("address", { required: "Address is required" })}
                className={`w-full border rounded p-2 ${
                  errors.address ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.address && (
                <p className="text-red-600 text-sm mt-1">{errors.address.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="suburb" className="block font-medium">
                Suburb *
              </label>
              <input
                id="suburb"
                type="text"
                {...register("suburb", { required: "Suburb is required" })}
                className={`w-full border rounded p-2 ${
                  errors.suburb ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.suburb && (
                <p className="text-red-600 text-sm mt-1">{errors.suburb.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="state" className="block font-medium">
                State *
              </label>
              <input
                id="state"
                type="text"
                {...register("state", { required: "State is required" })}
                className={`w-full border rounded p-2 ${
                  errors.state ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.state && (
                <p className="text-red-600 text-sm mt-1">{errors.state.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="postcode" className="block font-medium">
                Postcode *
              </label>
              <input
                id="postcode"
                type="text"
                {...register("postcode", { required: "Postcode is required" })}
                className={`w-full border rounded p-2 ${
                  errors.postcode ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.postcode && (
                <p className="text-red-600 text-sm mt-1">{errors.postcode.message}</p>
              )}
            </div>
          </>
        )}

        {step === 2 && (
          <>
            <h2 className="mb-4 font-semibold">Step 2: Bio and Services</h2>
            <div className="mb-3">
              <label htmlFor="bio" className="block font-medium">
                Bio *
              </label>
              <textarea
                id="bio"
                {...register("bio", { required: "Bio is required" })}
                className={`w-full border rounded p-2 ${
                  errors.bio ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.bio && (
                <p className="text-red-600 text-sm mt-1">{errors.bio.message}</p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="services" className="block font-medium">
                Services Offered *
              </label>
              <textarea
                id="services"
                {...register("services", { required: "Services are required" })}
                className={`w-full border rounded p-2 ${
                  errors.services ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.services && (
                <p className="text-red-600 text-sm mt-1">{errors.services.message}</p>
              )}
            </div>
          </>
        )}

        {step === 3 && (
          <>
            <h2 className="mb-4 font-semibold">Step 3: Availability</h2>
            <div className="mb-3">
              <label htmlFor="availability" className="block font-medium">
                Availability *
              </label>
              <textarea
                id="availability"
                {...register("availability", { required: "Availability is required" })}
                className={`w-full border rounded p-2 ${
                  errors.availability ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.availability && (
                <p className="text-red-600 text-sm mt-1">{errors.availability.message}</p>
              )}
            </div>
          </>
        )}

        {step === 4 && (
          <>
            <h2 className="mb-4 font-semibold">Step 4: Emergency Contact</h2>
            <div className="mb-3">
              <label htmlFor="emergencyContactName" className="block font-medium">
                Emergency Contact Name *
              </label>
              <input
                id="emergencyContactName"
                type="text"
                {...register("emergencyContactName", {
                  required: "Emergency contact name is required",
                })}
                className={`w-full border rounded p-2 ${
                  errors.emergencyContactName ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.emergencyContactName && (
                <p className="text-red-600 text-sm mt-1">
                  {errors.emergencyContactName.message}
                </p>
              )}
            </div>

            <div className="mb-3">
              <label htmlFor="emergencyContactPhone" className="block font-medium">
                Emergency Contact Phone *
              </label>
              <input
                id="emergencyContactPhone"
                type="tel"
                {...register("emergencyContactPhone", {
                  required: "Emergency contact phone is required",
                })}
                className={`w-full border rounded p-2 ${
                  errors.emergencyContactPhone ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.emergencyContactPhone && (
                <p className="text-red-600 text-sm mt-1">
                  {errors.emergencyContactPhone.message}
                </p>
              )}
            </div>
          </>
        )}

        <div className="flex justify-between mt-6">
          {step > 1 && (
            <button
              type="button"
              onClick={prevStep}
              className="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400"
              disabled={loading}
            >
              Previous
            </button>
          )}
          {step < 4 && (
            <button
              type="button"
              onClick={nextStep}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50"
              disabled={loading}
            >
              {loading ? "Loading..." : "Continue"}
            </button>
          )}
          {step === 4 && (
            <button
              type="submit"
              className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
              disabled={loading}
            >
              {loading ? "Submitting..." : "Submit"}
            </button>
          )}
        </div>
      </form>
    </div>
  );
};

export default CaregiverRegistration;
