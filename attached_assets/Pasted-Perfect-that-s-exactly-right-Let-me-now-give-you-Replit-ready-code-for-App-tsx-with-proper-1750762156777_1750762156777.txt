Perfect ‚Äî that's exactly right. Let me now give you:

‚úÖ Replit-ready code for:
App.tsx ‚Äî with proper lazy loading + Suspense

payment-demo.tsx ‚Äî Stripe is loaded only in this component, not globally

CheckoutForm.tsx ‚Äî simple Stripe checkout form (for testing)

üß© 1. App.tsx ‚Äì Update with Lazy Route for Stripe Page
tsx
Copy
Edit
// client/src/App.tsx
import React, { Suspense } from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

// Lazy-load only Stripe page
const PaymentDemo = React.lazy(() => import('./pages/payment-demo'));

function App() {
  return (
    <Router>
      <Routes>
        {/* Other routes here */}
        <Route
          path="/payment-demo"
          element={
            <Suspense fallback={<div>Loading Payment Demo...</div>}>
              <PaymentDemo />
            </Suspense>
          }
        />
      </Routes>
    </Router>
  );
}

export default App;
üí≥ 2. payment-demo.tsx ‚Äì Stripe Loads Inside Only This Page
tsx
Copy
Edit
// client/src/pages/payment-demo.tsx
import React, { useEffect, useState } from 'react';
import { loadStripe } from '@stripe/stripe-js';
import { Elements } from '@stripe/react-stripe-js';
import CheckoutForm from '../components/CheckoutForm';

const stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY);

const PaymentDemo = () => {
  const [clientSecret, setClientSecret] = useState('');

  useEffect(() => {
    // Fetch clientSecret from your backend
    fetch('/api/stripe/create-payment-intent', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: 7500 }) // amount in cents
    })
      .then(res => res.json())
      .then(data => setClientSecret(data.clientSecret));
  }, []);

  if (!clientSecret) return <p>Preparing payment...</p>;

  return (
    <Elements stripe={stripePromise} options={{ clientSecret }}>
      <CheckoutForm />
    </Elements>
  );
};

export default PaymentDemo;
üßæ 3. CheckoutForm.tsx ‚Äì Test Payment Form Component
tsx
Copy
Edit
// client/src/components/CheckoutForm.tsx
import React from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';

const CheckoutForm = () => {
  const stripe = useStripe();
  const elements = useElements();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!stripe || !elements) return;

    const result = await stripe.confirmCardPayment(elements.getElement(CardElement), {
      payment_method: {
        card: elements.getElement(CardElement),
      },
    });

    if (result.error) {
      alert(result.error.message);
    } else if (result.paymentIntent?.status === 'succeeded') {
      alert('Payment successful!');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2>Complete Payment</h2>
      <CardElement />
      <button type="submit" disabled={!stripe}>Pay Now</button>
    </form>
  );
};

export default CheckoutForm;
üîê Also Add to .env on Replit:
env
Copy
Edit
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_...
Use your test key here.

‚úÖ Test it at:
https://vivaly.com.au/payment-demo

You'll see:

No homepage Stripe errors

Lazy load works

Stripe only loads on this route

