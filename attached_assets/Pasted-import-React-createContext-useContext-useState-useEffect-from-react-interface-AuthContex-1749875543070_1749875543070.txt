import React, { createContext, useContext, useState, useEffect } from "react";

interface AuthContextType {
  user: User | null;
  activeRole: string | null;
  loading: boolean;
  login: (email: string, password: string, role: string) => Promise<void>;
  switchRole: (role: string) => Promise<void>;
  logout: () => Promise<void>;
  // other auth methods...
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [activeRole, setActiveRole] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const login = async (email: string, password: string, role: string) => {
    setLoading(true);
    try {
      const response = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ email, password, role }),
      });
      if (!response.ok) throw new Error("Login failed");
      const data = await response.json();
      setUser(data.user);
      setActiveRole(data.activeRole);
    } catch (error) {
      // handle error, e.g. toast notification
    } finally {
      setLoading(false);
    }
  };

  const switchRole = async (role: string) => {
    setLoading(true);
    try {
      const response = await fetch("/api/auth/switch-role", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ role }),
      });
      if (!response.ok) throw new Error("Role switch failed");
      const data = await response.json();
      setActiveRole(data.activeRole);
    } catch (error) {
      // handle error
    } finally {
      setLoading(false);
    }
  };

  const logout = async () => {
    setLoading(true);
    try {
      await fetch("/api/auth/logout", { method: "POST" });
      setUser(null);
      setActiveRole(null);
    } finally {
      setLoading(false);
    }
  };

  // ... load user on mount etc.

  return (
    <AuthContext.Provider value={{ user, activeRole, loading, login, switchRole, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth must be used within AuthProvider");
  return context;
};
